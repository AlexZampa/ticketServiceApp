spring.datasource.url=jdbc:postgresql://host.docker.internal:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=mysecretpassword
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=validate

keycloak.server-url=http://host.docker.internal:8001
keycloak.realm=ticketService
keycloak.client-id=my-client
keycloak.username=admin
keycloak.password=admin
spring.security.oauth2.resourceserver.jwt.issuer-uri=${keycloak.server-url}/realms/ticketService
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${spring.security.oauth2.resource-server.jwt.issuer-uri}/protocol/openid-connect/certs
keycloak.token-url=${spring.security.oauth2.resource-server.jwt.issuer-uri}/protocol/openid-connect/token
keycloak.logout-url=${spring.security.oauth2.resource-server.jwt.issuer-uri}/protocol/openid-connect/logout

jwt.auth.converter.resource-id=${keycloak.client-id}
jwt.auth.converter.principal-attribute=email
jwt.auth.converter.realm=${keycloak.realm}
jwt.auth.converter.jwk-set-uri=${spring.security.oauth2.resourceserver.jwt.jwk-set-uri}

# sampling all in dev, reduce it in prod to save loading
management.tracing.sampling.probability=1.0 
management.endpoints.web.exposure.include=prometheus
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.zipkin.tracing.endpoint=http://host.docker.internal:9411/api/v2/spans

logging.pattern.level="%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"
